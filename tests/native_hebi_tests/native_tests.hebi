"""
Native tests in the Hebi-go.
"""

from: unittest :import TestCase
print: TestCase

def: greet: name
    print: "Hello," name

hissp.basic.._macro_.deftype: TestNative pass: TestCase
    test_mask lambda: pass: self
        self.assertEqual:
            pass:  # Example based on cascade macro.
                lambda: pass: thing thing_sym : :* calls
                    !mask:pass:lambda: pass: : _:thing_sym _:thing
                        print: "Hi!"  # Builtin symbol.
                        greet: "World!"  # Local symbol.
                        __:map:  # Splice
                            lambda: pass:call
                                !mask:pass:  # Nested !mask.
                                    _:operator..getitem: call 0
                                    _:thing_sym
                                    __:operator..getitem: call slice: 1 None
                            calls
                        _:thing_sym
                : :*
                quote:pass: spam foo
                    frobnicate: 7 24
                    reticulate: spline
            quote:pass:lambda: pass: : foo spam
                builtins..print: "Hi!"
                tests.native_hebi_tests.native_tests..greet: "World!"
                frobnicate: foo 7 24
                reticulate: foo spline
                foo

    test_elif lambda: pass: self
        self.assertEqual:
            hebi.bootstrap..if_:
                : :* quote:pass:
                    ('a'<'b')
                    pass:
                        print: "less"
                    elif: ('a'>'b')
                        print: "more"
                    elif: ('a'=='b')
                        print: "equal"
                    else:
                        print: "nan"
            quote:hebi.bootstrap.._if_:
                ('a'<'b')
                lambda: pass:
                    print: "less"
                lambda: pass:
                    ('a'>'b')
                lambda: pass:
                    print: "more"
                lambda: pass:
                    ('a'=='b')
                lambda: pass:
                    print: "equal"
                : else_
                lambda: pass:
                    print: "nan"

    test_fail lambda: pass: self
        self.fail:

# TODO: implement class:
# class: TestNative: TestCase
#     def: test_fail: self
#         self.fail:

import: unittest
(unittest.main() if __name__ == "__main__" else None)