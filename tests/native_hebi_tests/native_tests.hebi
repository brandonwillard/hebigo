"""
Native tests in the Hebi-go.
"""

from: unittest :import TestCase

from: hypothesis :import given
from: hypothesis :import strategies :as st
# TODO: why isn't the below version working?
# import: hypothesis.strategies :as st

from: hebi.bootstrap :import function

print: st

hissp.basic.._macro_.requirexH_as:
    hissp.basic.._macro_.deftype deftype

print: TestCase

def: greet: name
    print: "Hello," name

deftype: TestNative pass:TestCase
    test_mask lambda: self:
        self.assertEqual:
            pass:  # Example based on cascade macro.
                lambda: pass: thing thing_sym : :* calls
                    !mask:pass:lambda: pass: : :,:thing_sym :,:thing
                        print: "Hi!"  # Builtin symbol.
                        greet: "World!"  # Local symbol.
                        :,@:map:  # Splice
                            lambda: pass:call
                                !mask:pass:  # Nested !mask.
                                    :,:operator..getitem: call 0
                                    :,:thing_sym
                                    :,@:operator..getitem: call slice: 1 None
                            calls
                        :,:thing_sym
                : :*
                quote:pass: spam foo
                    frobnicate: 7 24
                    reticulate: spline
            quote:pass:lambda: pass: : foo spam
                builtins..print: "Hi!"
                tests.native_hebi_tests.native_tests..greet: "World!"
                frobnicate: foo 7 24
                reticulate: foo spline
                foo

    test_elif lambda: self:
        self.assertEqual:
            hebi.bootstrap..if_:
                : :* quote:pass:
                    ('a'<'b')
                    :then:
                        print: "less"
                    :elif: ('a'>'b')
                        print: "more"
                    :elif: ('a'=='b')
                        print: "equal"
                    :else:
                        print: "nan"
            quote:hebi.bootstrap.._if_:
                ('a'<'b')
                lambda: pass:
                    print: "less"
                lambda: pass:
                    ('a'>'b')
                lambda: pass:
                    print: "more"
                lambda: pass:
                    ('a'=='b')
                lambda: pass:
                    print: "equal"
                : else_
                lambda: pass:
                    print: "nan"

deftype: TestAnd pass:TestCase
    test_null lambda: self:
        self.assertIs:
            and:
            True

    test_one pass:
        given: st.from_type: type
        function: quote:test_one
            lambda: self: x
                self.assertIs:
                    and: x
                    x

    test_two pass:
        given:
            st.from_type: type
            st.from_type: type
        function: quote:test_two
            lambda: self: x y
                self.assertIs:
                    and: x y
                    (x and y)

    test_shortcut lambda: self:
        and: 0 (0/0)
        and: 1 0 (0/0)
        and: 0 (0/0) (0/0)

    test_three pass:
        given:
            st.from_type: type
            st.from_type: type
            st.from_type: type
        function: quote:test_three
            lambda: self: x y z
                self.assertIs:
                    and: x y z
                    (x and y and z)


deftype: TestOr pass:TestCase
    test_null lambda: self:
        self.assertEqual:
            or:
            ()

    test_one pass:
        given: st.from_type: type
        function: quote:test_one
            lambda: self: x
                self.assertIs:
                    or: x
                    x

    test_two pass:
        given:
            st.from_type: type
            st.from_type: type
        function: quote:test_two
            lambda: self: x y
                self.assertIs:
                    or: x y
                    (x or y)

    test_shortcut lambda: self:
        or: 1 (0/0)
        or: 0 1 (0/0)
        or: 1 (0/0) (0/0)

    test_three pass:
        given:
            st.from_type: type
            st.from_type: type
            st.from_type: type
        function: quote:test_three
            lambda: self: x y z
                self.assertIs:
                    or: x y z
                    (x or y or z)


# TODO: implement class:
# class: TestNative: TestCase
#     def: test_fail: self
#         self.fail:

#def: __package__ "tests.native_hebi_tests"

import: unittest

if: (__name__ == "__main__")
    :then:
        # print: __package__
        # from: . :import recompile
        .main: unittest
        # recompile:
